"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[646],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,g=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return n?a.createElement(g,o(o({ref:t},c),{},{components:n})):a.createElement(g,o({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},862:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_position:1},o="useSpring",l={unversionedId:"Hooks/useSpring",id:"Hooks/useSpring",title:"useSpring",description:"Overview",source:"@site/docs/Hooks/useSpring.md",sourceDirName:"Hooks",slug:"/Hooks/useSpring",permalink:"/roact-spring/docs/Hooks/useSpring",draft:!1,editUrl:"https://github.com/chriscerie/roact-spring/edit/master/docs/Hooks/useSpring.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"defaultSidebar",previous:{title:"Imperatives",permalink:"/roact-spring/docs/Common/imperatives"},next:{title:"useSprings",permalink:"/roact-spring/docs/Hooks/useSprings"}},s={},p=[{value:"Overview",id:"overview",level:2},{value:"Either: declaratively overwrite values to change the animation",id:"either-declaratively-overwrite-values-to-change-the-animation",level:3},{value:"Or: pass a function that returns values, and imperatively update using the api",id:"or-pass-a-function-that-returns-values-and-imperatively-update-using-the-api",level:3},{value:"Finally: apply styles to components",id:"finally-apply-styles-to-components",level:3},{value:"Properties",id:"properties",level:2},{value:"Additional notes",id:"additional-notes",level:2},{value:"To-prop shortcut",id:"to-prop-shortcut",level:3},{value:"<code>Styles</code> is a table of bindings",id:"styles-is-a-table-of-bindings",level:3},{value:"Demos",id:"demos",level:2},{value:"Draggable element",id:"draggable-element",level:3}],c={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"usespring"},"useSpring"),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"Defines values into animated values."),(0,r.kt)("h3",{id:"either-declaratively-overwrite-values-to-change-the-animation"},"Either: declaratively overwrite values to change the animation"),(0,r.kt)("p",null,"If you re-render the component, the animation will update."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"local styles = RoactSpring.useSpring({\n    transparency = if toggle then 1 else 0,\n})\n")),(0,r.kt)("p",null,"If you want the animation to run on mount, you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"from")," to set the initial value."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"local styles = RoactSpring.useSpring({\n    from = { transparency = 0 },\n    to = { transparency = if toggle then 1 else 0 },\n})\n")),(0,r.kt)("h3",{id:"or-pass-a-function-that-returns-values-and-imperatively-update-using-the-api"},"Or: pass a function that returns values, and imperatively update using the api"),(0,r.kt)("p",null,"You will get an API table back. It will not automatically animate on mount and re-render, but you can call ",(0,r.kt)("inlineCode",{parentName:"p"},"api.start")," to start the animation. Handling updates like this is generally preferred as it's more powerful. Further documentation can be found in ",(0,r.kt)("a",{parentName:"p",href:"/docs/common/imperatives"},"Imperatives"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"local styles, api = RoactSpring.useSpring(function()\n    return { transparency = 0 }\n})\n\n-- Update spring with new props\napi.start({ transparency = if toggle then 1 else 0 })\n-- Stop animation\napi.stop()\n")),(0,r.kt)("h3",{id:"finally-apply-styles-to-components"},"Finally: apply styles to components"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'return React.createElement("Frame", {\n    Transparency = styles.transparency,\n    Size = UDim2.fromScale(0.3, 0.3),\n})\n')),(0,r.kt)("h2",{id:"properties"},"Properties"),(0,r.kt)("p",null,"All properties documented in the ",(0,r.kt)("a",{parentName:"p",href:"/docs/common/props"},"common props")," apply."),(0,r.kt)("h2",{id:"additional-notes"},"Additional notes"),(0,r.kt)("h3",{id:"to-prop-shortcut"},"To-prop shortcut"),(0,r.kt)("p",null,'Any property that useSpring does not recognize will be combined into "to", for instance ',(0,r.kt)("inlineCode",{parentName:"p"},"transparency = 1")," will become ",(0,r.kt)("inlineCode",{parentName:"p"},"to = { transparency = 1 }"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"-- This...\nlocal styles = RoactSpring.useSpring({ transparency = 1 })\n-- is a shortcut for this...\nlocal styles = RoactSpring.useSpring({ to = { transparency = 1 } })\n")),(0,r.kt)("h3",{id:"styles-is-a-table-of-bindings"},(0,r.kt)("inlineCode",{parentName:"h3"},"Styles")," is a table of bindings"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"styles")," table is just a table of bindings. This means you can map them to props as you could for any other bindings if you wanted to achieve custom behavior. Animating with ",(0,r.kt)("a",{parentName:"p",href:"/docs/Additional%20Notes#thinking-in-alpha-values"},"alpha values")," is a common use case for this."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'local function Example(_)\n    local styles, api = RoactSpring.useSpring(function()\n        return {\n            alpha = 0,\n        }\n    end)\n\n    React.useEffect(function()\n        api.start({ alpha = 1 })\n    end, {})\n\n    return React.createElement("Frame", {\n        Transparency = styles.alpha,\n        Position = styles.alpha:map(function(alpha)\n            return UDim2.fromScale(0.2, 0.2):Lerp(UDim2.fromScale(0.8, 0.2), alpha)\n        end),\n    })\nend\n')),(0,r.kt)("h2",{id:"demos"},"Demos"),(0,r.kt)("h3",{id:"draggable-element"},"Draggable element"),(0,r.kt)("a",{href:"https://github.com/chriscerie/roact-spring/blob/main/stories/hooks/useSpringDrag.story.lua"},(0,r.kt)("img",{src:"https://media.giphy.com/media/R2bJ57MNTdP7vmP6Ez/giphy.gif",width:"400"})))}d.isMDXComponent=!0}}]);