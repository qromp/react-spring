"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[378],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),l=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(p.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=l(t),d=a,f=m["".concat(p,".").concat(d)]||m[d]||u[d]||i;return t?r.createElement(f,o(o({ref:n},c),{},{components:t})):r.createElement(f,o({ref:n},c))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s[m]="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},4383:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=t(7462),a=(t(7294),t(3905));const i={sidebar_position:4},o="Imperatives",s={unversionedId:"Common/imperatives",id:"Common/imperatives",title:"Imperatives",description:"Imperative API",source:"@site/docs/Common/imperatives.md",sourceDirName:"Common",slug:"/Common/imperatives",permalink:"/roact-spring/docs/Common/imperatives",draft:!1,editUrl:"https://github.com/chriscerie/roact-spring/edit/master/docs/Common/imperatives.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"defaultSidebar",previous:{title:"Configs",permalink:"/roact-spring/docs/Common/configs"},next:{title:"useSpring",permalink:"/roact-spring/docs/Hooks/useSpring"}},p={},l=[{value:"Imperative API",id:"imperative-api",level:2},{value:"API methods",id:"api-methods",level:2}],c={toc:l},m="wrapper";function u(e){let{components:n,...t}=e;return(0,a.kt)(m,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"imperatives"},"Imperatives"),(0,a.kt)("h2",{id:"imperative-api"},"Imperative API"),(0,a.kt)("p",null,"Passing a function to ",(0,a.kt)("inlineCode",{parentName:"p"},"useSpring")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"useSprings")," will return an imperative API table. The following shows the difference between using the imperative and declarative API for toggling transparency."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"--[[\n    Using declarative API\n]]\nlocal toggle, setToggle = useState(false)\nlocal styles = RoactSpring.useSpring({\n    transparency = if toggle then 0 else 1,\n})\n\n-- Later\nsetToggle(function(prevState)\n    return not prevState\nend)\n\n\n--[[\n    Using imperative API\n]]\nlocal styles, api = RoactSpring.useSpring(function()\n    return { transparency = 1 }\nend)\n\n-- Later\napi.start({ transparency = if styles.transparency:getValue() == 1 then 0 else 1 })\n")),(0,a.kt)("p",null,"The rest of this page will use the imperative API."),(0,a.kt)("p",null,"You can also specify configs for each animation update."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"api.start({\n    position = UDim2.fromScale(0.5, 0.5),\n    rotation = 0,\n    config = { mass = 10, tension = 100, friction = 50 },\n})\n")),(0,a.kt)("p",null,"To run tasks after an animation has finished, chain the returned promise with ",(0,a.kt)("inlineCode",{parentName:"p"},"andThen"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'api.start({\n    position = UDim2.fromScale(0.5, 0.5),\n    rotation = 0,\n}):andThen(function()\n    print("Animation finished!")\nend)\n')),(0,a.kt)("h2",{id:"api-methods"},"API methods"),(0,a.kt)("p",null,"The api table in the second value returned from a spring has the following functions:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"local api = {\n    -- Start your animation optionally giving new props to merge \n    start: (props) => Promise,\n    -- Cancel some or all animations depending on the keys passed, no keys will cancel all.\n    stop: (keys) => void,\n    -- Pause some or all animations depending on the keys passed, no keys will pause all.\n    pause: (keys) => void,\n}\n")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"roact-spring guarantees that the api table identity is stable and won\u2019t change on re-renders. This is why it\u2019s safe to omit from the useEffect or useCallback dependency array.")))}u.isMDXComponent=!0}}]);