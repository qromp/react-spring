"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[90],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var a=n.createContext({}),c=function(e){var t=n.useContext(a),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(a.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(r),m=o,f=d["".concat(a,".").concat(m)]||d[m]||u[m]||i;return r?n.createElement(f,l(l({ref:t},p),{},{components:r})):n.createElement(f,l({ref:t},p))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,l=new Array(i);l[0]=m;var s={};for(var a in t)hasOwnProperty.call(t,a)&&(s[a]=t[a]);s.originalType=e,s[d]="string"==typeof e?e:o,l[1]=s;for(var c=2;c<i;c++)l[c]=r[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},9709:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var n=r(7462),o=(r(7294),r(3905));const i={sidebar_position:10},l="Controller",s={unversionedId:"Additional Classes/controller",id:"Additional Classes/controller",title:"Controller",description:"Overview",source:"@site/docs/Additional Classes/controller.md",sourceDirName:"Additional Classes",slug:"/Additional Classes/controller",permalink:"/roact-spring/docs/Additional Classes/controller",draft:!1,editUrl:"https://github.com/chriscerie/roact-spring/edit/master/docs/Additional Classes/controller.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"defaultSidebar",previous:{title:"useTrail",permalink:"/roact-spring/docs/Hooks/useTrail"},next:{title:"Additional Notes",permalink:"/roact-spring/docs/Additional Notes"}},a={},c=[{value:"Overview",id:"overview",level:2},{value:"Demos",id:"demos",level:2},{value:"Draggable element",id:"draggable-element",level:3}],p={toc:c},d="wrapper";function u(e){let{components:t,...r}=e;return(0,o.kt)(d,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"controller"},"Controller"),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Controller")," is roact-spring's heart. All primitives use it internally (including hooks). The api is very similar to the ",(0,o.kt)("inlineCode",{parentName:"p"},"useSpring")," hook."),(0,o.kt)("p",null,"This should be used when using class components. If you are using hooks, use ",(0,o.kt)("a",{parentName:"p",href:"/docs/hooks/useSpring"},"useSpring")," instead. Note that the controller's api uses the colon operator unlike the hooks."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'function Example:init()\n    self.styles, self.api = RoactSpring.Controller.new({\n        size = UDim2.fromOffset(150, 150),\n        position = UDim2.fromScale(0.5, 0.5),\n    })\nend\n\nfunction Example:render()\n    return e("TextButton", {\n        Position = self.styles.position,\n        Size = self.styles.size,\n\n        [React.Event.Activated] = function()\n            self.api:start({\n                size = UDim2.fromOffset(150, 150),\n                config = { tension = 100, friction = 10 },\n            })\n        end\n    })\nend\n')),(0,o.kt)("h2",{id:"demos"},"Demos"),(0,o.kt)("h3",{id:"draggable-element"},"Draggable element"),(0,o.kt)("a",{href:"https://github.com/chriscerie/roact-spring/blob/main/stories/components/SpringDrag.story.lua"},(0,o.kt)("img",{src:"https://media.giphy.com/media/R2bJ57MNTdP7vmP6Ez/giphy.gif",width:"400"})))}u.isMDXComponent=!0}}]);