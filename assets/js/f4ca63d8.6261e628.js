"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[778],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,g=u["".concat(l,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(g,o(o({ref:t},c),{},{components:n})):r.createElement(g,o({ref:t},c))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},852:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={sidebar_position:3},o="useTrail",s={unversionedId:"Hooks/useTrail",id:"Hooks/useTrail",title:"useTrail",description:"Overview",source:"@site/docs/Hooks/useTrail.md",sourceDirName:"Hooks",slug:"/Hooks/useTrail",permalink:"/roact-spring/docs/Hooks/useTrail",draft:!1,editUrl:"https://github.com/chriscerie/roact-spring/edit/master/docs/Hooks/useTrail.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"defaultSidebar",previous:{title:"useSprings",permalink:"/roact-spring/docs/Hooks/useSprings"},next:{title:"Controller",permalink:"/roact-spring/docs/Additional Classes/controller"}},l={},p=[{value:"Overview",id:"overview",level:2},{value:"Either: declaratively overwrite values to change the animation",id:"either-declaratively-overwrite-values-to-change-the-animation",level:3},{value:"Or: pass a function that returns values, and imperatively update using the api",id:"or-pass-a-function-that-returns-values-and-imperatively-update-using-the-api",level:3},{value:"Finally: apply styles to components",id:"finally-apply-styles-to-components",level:3},{value:"Properties",id:"properties",level:2},{value:"Demos",id:"demos",level:2},{value:"Staggered list",id:"staggered-list",level:3},{value:"Staggered text",id:"staggered-text",level:3},{value:"Trailing elements",id:"trailing-elements",level:3}],c={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"usetrail"},"useTrail"),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("p",null,"Creates multiple springs with a single config, each spring will follow the previous one. Use it for staggered animations."),(0,a.kt)("h3",{id:"either-declaratively-overwrite-values-to-change-the-animation"},"Either: declaratively overwrite values to change the animation"),(0,a.kt)("p",null,"If you re-render the component with changed props, the animation will update."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"local springProps = {}\nlocal length = #items\nfor index, item in ipairs(items) do\n    table.insert(springProps, {\n        transparency = if toggles[i] then 1 else 0,\n    })\nend\nlocal springs = RoactSpring.useTrail(length, springProps)\n")),(0,a.kt)("p",null,"If you want the animation to run on mount, you can use ",(0,a.kt)("inlineCode",{parentName:"p"},"from")," to set the initial value."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"local springProps = {}\nlocal length = #items\nfor index, item in ipairs(items) do\n    table.insert(springProps, {\n        from = { transparency = item.transparency },\n        to = { transparency = if toggles[i] then 1 else 0 },\n    })\nend\nlocal springs = RoactSpring.useTrail(length, springProps)\n")),(0,a.kt)("h3",{id:"or-pass-a-function-that-returns-values-and-imperatively-update-using-the-api"},"Or: pass a function that returns values, and imperatively update using the api"),(0,a.kt)("p",null,"You will get an API table back. It will not automatically animate on mount and re-render, but you can call ",(0,a.kt)("inlineCode",{parentName:"p"},"api.start")," to start the animation. Handling updates like this is generally preferred as it's more powerful. Further documentation can be found in ",(0,a.kt)("a",{parentName:"p",href:"/docs/common/imperatives"},"Imperatives"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"local length = #items\nlocal springs, api = RoactSpring.useTrail(length, function(index)\n    return { transparency = items[index].transparency }\nend)\n\n-- Start animations\napi.start(function(index)\n    return { position = UDim2.fromScale(0.5 * index, 0.16) }\nend)\n-- Stop all springs\napi.stop()\n")),(0,a.kt)("h3",{id:"finally-apply-styles-to-components"},"Finally: apply styles to components"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local contents = {}\nfor i = 1, 4 do\n    contents[i] = React.createElement("Frame", {\n        Position = springs[i].position,\n        Size = UDim2.fromScale(0.3, 0.3),\n    })\nend\nreturn contents\n')),(0,a.kt)("h2",{id:"properties"},"Properties"),(0,a.kt)("p",null,"All properties documented in the ",(0,a.kt)("a",{parentName:"p",href:"/docs/common/props"},"common props")," apply."),(0,a.kt)("p",null,"By default, each spring will start 0.1 seconds after the previous one. You can override this by passing a ",(0,a.kt)("inlineCode",{parentName:"p"},"delay")," property."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"-- Now each spring will start 0.2 seconds after the previous one\nlocal springs, api = RoactSpring.useTrail(length, function(index)\n    return {\n        transparency = items[index].transparency,\n        delay = 0.2,\n    }\nend)\n")),(0,a.kt)("p",null,"You can also pass a ",(0,a.kt)("inlineCode",{parentName:"p"},"delay")," property to each spring individually."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"-- The first spring will start 0.1 seconds after the previous one, the second 0.2 seconds, and so on\nlocal springs, api = RoactSpring.useTrail(length, function(index)\n    return {\n        transparency = items[index].transparency,\n        delay = index * 0.1,\n    }\nend)\n")),(0,a.kt)("h2",{id:"demos"},"Demos"),(0,a.kt)("h3",{id:"staggered-list"},"Staggered list"),(0,a.kt)("a",{href:"https://github.com/chriscerie/roact-spring/blob/main/stories/hooks/useTrailList.story.lua"},(0,a.kt)("img",{src:"https://media.giphy.com/media/XfG0GNKGCKang91lLN/giphy.gif",width:"400"})),(0,a.kt)("h3",{id:"staggered-text"},"Staggered text"),(0,a.kt)("a",{href:"https://github.com/chriscerie/roact-spring/blob/main/stories/hooks/useTrailText.story.lua"},(0,a.kt)("img",{src:"https://media.giphy.com/media/9llkynmhlsUvZCupPz/giphy.gif",width:"300"})),(0,a.kt)("h3",{id:"trailing-elements"},"Trailing elements"),(0,a.kt)("a",{href:"https://github.com/chriscerie/roact-spring/blob/main/stories/hooks/useTrailFollow.story.lua"},(0,a.kt)("img",{src:"https://media.giphy.com/media/BS20XRr522AJgkCyZR/giphy.gif",width:"400"})))}d.isMDXComponent=!0}}]);